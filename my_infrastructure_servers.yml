Description: >
  Server, security, and load-balance configurations / Udagram Project
Parameters:
  EnvironmentName:
    Description: Project name prefixed to resource names.
    Type: String

Resources:
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic to and from load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      -   IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      -   IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      -   IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      -   IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      -   IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip
      ImageId: ami-0d6621c01e8c2de2c
      KeyName: UdagramPojectKeyPair
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
      -   Ref: WebServerSecGroup
      InstanceType: t3.micro
      BlockDeviceMappings:
      -   DeviceName: "/dev/sdk"
          Ebs:
              VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:  
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
          Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      -   Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
      - Ref: LoadBalancerSecGroup
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-1"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN-2"

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        DefaultActions:
        -   Type: forward
            TargetGroupArn:
                Ref: WebAppTargetGroup
        LoadBalancerArn:
            Ref: WebAppLB
        Port: 80
        Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        Actions:
        -   Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        -   Field: path-pattern
            Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1      

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: S3BucketRole

  S3BucketRole:
    Type: AWS::IAM::Role
    Properties:
          RoleName: 
              !Sub ${EnvironmentName}-Role
          AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
              -   Effect: Allow
                  Principal:
                      Service:
                      - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
          Path: "/"

  S3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: AmazonS3ReadOnlyAccess
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - 
                Effect: Allow
                Action: 
                -   s3:Get*
                -   s3:List*
                Resource: 
                -   arn:aws:s3:::udacity-demo-1
                -   arn:aws:s3:::udacity-demo-1/*
        Roles:
        -   Ref: S3BucketRole

Outputs:
  LoadBalancerDNSName:
    Description: DNS Name of the web application
    Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-DNS-NAME"